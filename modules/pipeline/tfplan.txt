
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  # aws_codestarconnections_connection.nyu-vip-connection will be created
  + resource "aws_codestarconnections_connection" "nyu-vip-connection" {
      + arn               = (known after apply)
      + connection_status = (known after apply)
      + id                = (known after apply)
      + name              = "nyu-vip-connection"
      + provider_type     = "GitHub"
      + tags_all          = (known after apply)
    }

  # module.IAM.data.aws_caller_identity.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_caller_identity" "current" {
      + account_id = (known after apply)
      + arn        = (known after apply)
      + id         = (known after apply)
      + user_id    = (known after apply)
    }

  # module.IAM.data.aws_iam_role.existing_codepipeline_role[0] will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_iam_role" "existing_codepipeline_role" {
      + arn                  = (known after apply)
      + assume_role_policy   = (known after apply)
      + create_date          = (known after apply)
      + description          = (known after apply)
      + id                   = (known after apply)
      + max_session_duration = (known after apply)
      + name                 = "nyu-codepipeline-iam-role"
      + path                 = (known after apply)
      + permissions_boundary = (known after apply)
      + role_last_used       = (known after apply)
      + tags                 = (known after apply)
      + unique_id            = (known after apply)
    }

  # module.IAM.data.aws_partition.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_partition" "current" {
      + dns_suffix         = (known after apply)
      + id                 = (known after apply)
      + partition          = (known after apply)
      + reverse_dns_prefix = (known after apply)
    }

  # module.IAM.data.aws_region.current will be read during apply
  # (depends on a resource or a module with changes pending)
 <= data "aws_region" "current" {
      + description = (known after apply)
      + endpoint    = (known after apply)
      + id          = (known after apply)
      + name        = (known after apply)
    }

  # module.IAM.aws_iam_policy.codepipeline_policy will be created
  + resource "aws_iam_policy" "codepipeline_policy" {
      + arn         = (known after apply)
      + description = "Policy to allow codepipeline to execute"
      + id          = (known after apply)
      + name        = "nyu-vip-codepipeline-policy"
      + name_prefix = (known after apply)
      + path        = "/"
      + policy      = (known after apply)
      + policy_id   = (known after apply)
      + tags        = {
          + "Environment" = "dev"
          + "Name"        = "nyu-vip-codepipeline-policy"
        }
      + tags_all    = {
          + "Environment" = "dev"
          + "Name"        = "nyu-vip-codepipeline-policy"
        }
    }

  # module.IAM.aws_iam_role.codepipeline_role will be created
  + resource "aws_iam_role" "codepipeline_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codepipeline.amazonaws.com"
                        }
                    },
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "nyu-codepipeline-iam-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags                  = {
          + "Environment" = "dev"
          + "Name"        = "nyu-vip-codepipeline-role"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Name"        = "nyu-vip-codepipeline-role"
        }
      + unique_id             = (known after apply)
    }

  # module.IAM.aws_iam_role_policy_attachment.codepipeline_role_attach will be created
  + resource "aws_iam_role_policy_attachment" "codepipeline_role_attach" {
      + id         = (known after apply)
      + policy_arn = (known after apply)
      + role       = "nyu-codepipeline-iam-role"
    }

  # module.codebuild.aws_codebuild_project.nyu_vip_codebuild_project will be created
  + resource "aws_codebuild_project" "nyu_vip_codebuild_project" {
      + arn                  = (known after apply)
      + badge_enabled        = false
      + badge_url            = (known after apply)
      + build_timeout        = 60
      + description          = (known after apply)
      + encryption_key       = (known after apply)
      + id                   = (known after apply)
      + name                 = "nyu-vip-codebuild"
      + project_visibility   = "PRIVATE"
      + public_project_alias = (known after apply)
      + queued_timeout       = 480
      + service_role         = (known after apply)
      + tags                 = {
          + "Name" = "nyu-vip-codebuild"
        }
      + tags_all             = {
          + "Name" = "nyu-vip-codebuild"
        }

      + artifacts {
          + encryption_disabled    = false
          + override_artifact_name = false
          + type                   = "CODEPIPELINE"
        }

      + environment {
          + compute_type                = "BUILD_GENERAL1_SMALL"
          + image                       = "aws/codebuild/nodejs:14.0"
          + image_pull_credentials_type = "CODEBUILD"
          + privileged_mode             = true
          + type                        = "LINUX_CONTAINER"

          + environment_variable {
              + name  = "AWS_ACCOUNT_ID"
              + type  = "PLAINTEXT"
              + value = "713215096865"
            }
        }

      + logs_config {
          + cloudwatch_logs {
              + status = "ENABLED"
            }
        }

      + source {
          + buildspec = "buildspec.yml"
          + type      = "CODEPIPELINE"
        }
    }

  # module.codebuild.aws_iam_role.codebuild_role will be created
  + resource "aws_iam_role" "codebuild_role" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "codebuild.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "codebuild-service-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.codepipeline.aws_codepipeline.codepipeline will be created
  + resource "aws_codepipeline" "codepipeline" {
      + arn            = (known after apply)
      + execution_mode = "SUPERSEDED"
      + id             = (known after apply)
      + name           = "nyu-vip-pipeline"
      + pipeline_type  = "V1"
      + role_arn       = (known after apply)
      + tags_all       = (known after apply)

      + artifact_store {
          + location = "nyu-vip-codepipeline-bucket"
          + type     = "S3"

          + encryption_key {
              + id   = (known after apply)
              + type = "KMS"
            }
        }

      + stage {
          + name = "Source"

          + action {
              + category         = "Source"
              + configuration    = (known after apply)
              + name             = "download-source-code"
              + output_artifacts = [
                  + "source_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeStarSourceConnection"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
      + stage {
          + name = "Build"

          + action {
              + category         = "Build"
              + configuration    = {
                  + "ProjectName" = "nyu-vip-codebuild"
                }
              + input_artifacts  = [
                  + "source_output",
                ]
              + name             = "Build"
              + output_artifacts = [
                  + "build_output",
                ]
              + owner            = "AWS"
              + provider         = "CodeBuild"
              + region           = (known after apply)
              + run_order        = (known after apply)
              + version          = "1"
            }
        }
    }

  # module.kms.aws_kms_key.encryption_key will be created
  + resource "aws_kms_key" "encryption_key" {
      + arn                                = (known after apply)
      + bypass_policy_lockout_safety_check = false
      + customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      + deletion_window_in_days            = 30
      + description                        = "This key is used to encrypt bucket objects"
      + enable_key_rotation                = true
      + id                                 = (known after apply)
      + is_enabled                         = true
      + key_id                             = (known after apply)
      + key_usage                          = "ENCRYPT_DECRYPT"
      + multi_region                       = (known after apply)
      + policy                             = (known after apply)
      + tags                               = {
          + "Name" = "codepipeline-kms-key"
        }
      + tags_all                           = {
          + "Name" = "codepipeline-kms-key"
        }
    }

  # module.s3.aws_s3_bucket.codepipeline_bucket will be created
  + resource "aws_s3_bucket" "codepipeline_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "nyu-vip-codepipeline-bucket"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = true
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Name" = "nyu-vip-codepipeline-bucket"
        }
      + tags_all                    = {
          + "Name" = "nyu-vip-codepipeline-bucket"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
    }

  # module.s3.aws_s3_bucket_acl.codepipeline_bucket_acl will be created
  + resource "aws_s3_bucket_acl" "codepipeline_bucket_acl" {
      + acl    = "private"
      + bucket = (known after apply)
      + id     = (known after apply)
    }

  # module.s3.aws_s3_bucket_public_access_block.codepipeline_bucket_access will be created
  + resource "aws_s3_bucket_public_access_block" "codepipeline_bucket_access" {
      + block_public_acls       = true
      + block_public_policy     = true
      + bucket                  = (known after apply)
      + id                      = (known after apply)
      + ignore_public_acls      = true
      + restrict_public_buckets = true
    }

  # module.s3.aws_s3_bucket_server_side_encryption_configuration.codepipeline_bucket_encryption will be created
  + resource "aws_s3_bucket_server_side_encryption_configuration" "codepipeline_bucket_encryption" {
      + bucket = "nyu-vip-codepipeline-bucket"
      + id     = (known after apply)

      + rule {
          + apply_server_side_encryption_by_default {
              + kms_master_key_id = (known after apply)
              + sse_algorithm     = "aws:kms"
            }
        }
    }

  # module.s3.aws_s3_bucket_versioning.codepipeline_bucket_versioning will be created
  + resource "aws_s3_bucket_versioning" "codepipeline_bucket_versioning" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + versioning_configuration {
          + mfa_delete = (known after apply)
          + status     = "Enabled"
        }
    }

Plan: 13 to add, 0 to change, 0 to destroy.
